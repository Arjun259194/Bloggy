datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  lastName      String
  countryCode   String
  country       String
  contactNumber String
  state         String
  city          String
  address       String
  email         String      @unique
  password      String
  role          Role
  blogs         Blog[]      @relation("UserBlogs")
  comments      Comment[]
  likes         Like[]
  ratings       Rating[]
  followers     Following[] @relation("UserFollowers")
  following     Following[] @relation("UserFollowing")

  @@map("users")
}

model Blog {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  content       String
  category      Category?    @relation(fields: [categoryId], references: [id])
  categoryId    String?      @db.ObjectId
  // subcategory   Subcategory @relation(fields: [subcategoryId], references: [id])
  // subcategoryId String      @db.ObjectId
  tags          String[]
  uploader      User        @relation("UserBlogs", fields: [uploaderId], references: [id], onDelete: Cascade)
  uploaderId    String      @db.ObjectId
  comments      Comment[]
  likes         Like[]
  ratings       Rating[]

  @@map("blogs")
}

model Category {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String        @unique
  // subcategories Subcategory[]
  Blog          Blog[]

  @@map("categories")
}

// model Subcategory { 
//   id         String   @id @default(auto()) @map("_id") @db.ObjectId
//   name       String
//   category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
//   categoryId String   @db.ObjectId
//   blogs      Blog[]

//   @@map("subcategories")
// }

model Comment {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  content String
  blog    Blog   @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId  String @db.ObjectId
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String @db.ObjectId

  @@map("comments")
}

model Like {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  blog   Blog   @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId

  @@map("likes")
}

model Rating {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  value  Int
  blog   Blog   @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId

  @@map("ratings")
}

model Following {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  follower    User   @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String @db.ObjectId
  following   User   @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String @db.ObjectId

  @@map("followings")
}

enum Role {
  ADMIN
  USER
  BLOG_UPLOADER
}
